/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package server;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.StringJoiner;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import javax.swing.DefaultListModel;
import static server.ServerGUI.listModel;

/**
 *
 * @author Admin
 */
public class ServerGUI extends javax.swing.JFrame {

    private final ScheduledExecutorService scheduler = 
            Executors.newScheduledThreadPool(1);
    public int redPar = 5, yellowPar = 1, greenPar = 10;
    public static boolean start = false, red = false, yellow = false, green = false;    
    static DefaultListModel listModel = new DefaultListModel();
    
    /**
     * Creates new form ServerGUI
     */
    public ServerGUI() {
        initComponents();
        ta_output.append("-----Server Off-----\n");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_clients = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        ta_output = new javax.swing.JTextArea();
        rb_serverOff = new javax.swing.JRadioButton();
        rb_serverOn = new javax.swing.JRadioButton();
        rb_red = new javax.swing.JRadioButton();
        rb_yellow = new javax.swing.JRadioButton();
        rb_green = new javax.swing.JRadioButton();
        slider_red = new javax.swing.JSlider();
        slider_yellow = new javax.swing.JSlider();
        slider_green = new javax.swing.JSlider();
        jButton1 = new javax.swing.JButton();
        tf_red = new javax.swing.JTextField();
        tf_yellow = new javax.swing.JTextField();
        tf_green = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jScrollPane1.setToolTipText("127.0.0.1");

        list_clients.setModel(listModel);
        list_clients.setToolTipText("");
        jScrollPane1.setViewportView(list_clients);

        ta_output.setColumns(20);
        ta_output.setRows(5);
        jScrollPane2.setViewportView(ta_output);

        buttonGroup1.add(rb_serverOff);
        rb_serverOff.setSelected(true);
        rb_serverOff.setText("Server Off");
        rb_serverOff.setName(""); // NOI18N
        rb_serverOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ServerOff(evt);
            }
        });

        buttonGroup1.add(rb_serverOn);
        rb_serverOn.setText("Server On");
        rb_serverOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ServerOn(evt);
            }
        });

        buttonGroup2.add(rb_red);
        rb_red.setText("Red");
        rb_red.setName("rb_red"); // NOI18N

        buttonGroup2.add(rb_yellow);
        rb_yellow.setText("Yellow");
        rb_yellow.setName("rb_yellow"); // NOI18N

        buttonGroup2.add(rb_green);
        rb_green.setText("Green");
        rb_green.setName("rb_green"); // NOI18N

        slider_red.setMaximum(500);

        slider_yellow.setMaximum(500);
        slider_yellow.setValue(10);

        slider_green.setMaximum(500);
        slider_green.setToolTipText("");
        slider_green.setValue(100);

        jButton1.setText("Send Updates");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendUpdates(evt);
            }
        });

        tf_red.setToolTipText("");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, slider_red, org.jdesktop.beansbinding.ELProperty.create("${value}"), tf_red, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, slider_yellow, org.jdesktop.beansbinding.ELProperty.create("${value}"), tf_yellow, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, slider_green, org.jdesktop.beansbinding.ELProperty.create("${value}"), tf_green, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel2.setText("Clients:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rb_serverOff)
                                .addGap(18, 18, 18)
                                .addComponent(rb_serverOn))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rb_red)
                                    .addComponent(rb_yellow)
                                    .addComponent(rb_green))
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(slider_red, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(tf_red))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(slider_green, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(tf_green, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(slider_yellow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(tf_yellow, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 162, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 22, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rb_serverOff)
                            .addComponent(rb_serverOn)
                            .addComponent(jLabel2))
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(rb_red)
                            .addComponent(slider_red, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tf_red))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(rb_yellow)
                            .addComponent(slider_yellow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tf_yellow))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(rb_green)
                            .addComponent(slider_green, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tf_green))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ServerOn(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ServerOn
        boolean start = true;
        System.out.println("Server On");
        ta_output.append("-----Server On-----\n");
        
    }//GEN-LAST:event_ServerOn

    private void ServerOff(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ServerOff
        System.out.println("-----Server Off-----");
        ta_output.append("-----Server Off-----\n");
    }//GEN-LAST:event_ServerOff

    private void SendUpdates(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendUpdates
        if(rb_serverOff.isSelected()){
            System.out.println("Error: Can't send updates because server is off");
            ta_output.append("Error: Can't send updates because server is off\n");
            return;
        }
        
        StringJoiner updates = new StringJoiner("-","","");
        updates.add(tf_red.getText());
        updates.add(tf_yellow.getText());
        updates.add(tf_green.getText());
        
        redPar = Integer.parseInt(tf_red.getText());
        yellowPar = Integer.parseInt(tf_yellow.getText());
        greenPar = Integer.parseInt(tf_green.getText());
        
        System.out.println(updates.toString());
        ta_output.append("Updates sent to clients: " + 
                updates.toString() + "\n");
        //Sending updates to all clients
    }//GEN-LAST:event_SendUpdates

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerGUI().setVisible(true);
            }
        });
        
        int portNumber = 5555; //Default port to use
        int clientNr = 0;
        if (args.length > 0){
            if (args.length == 1)
                portNumber = Integer.parseInt(args[0]);
            else{
                System.err.println("Usage: java EchoUcaseServerMutiClients [<port number>]");
                System.exit(1);
            }
        }
        
        System.out.println("Multi-client TCP server is up and running.");
                
        //Create server socket with the given port number
        try(ServerSocket ss = new ServerSocket(portNumber)){
            while(true){
                // create and start a new ClientServer thread for each connected client
                ClientServer clientserver = new ClientServer(ss.accept(), clientNr++);
                System.out.println("Client opprettet: " + clientserver.connectSocket.getInetAddress());
                listModel.addElement(clientserver.connectSocket.getInetAddress());
                clientserver.start();
            }
            
        }catch (IOException e){
            System.out.println("Exception occurred when trying to listen on port "
                + portNumber + " or listening for a connection");
            System.out.println(e.getMessage());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList list_clients;
    private javax.swing.JRadioButton rb_green;
    private javax.swing.JRadioButton rb_red;
    private javax.swing.JRadioButton rb_serverOff;
    private javax.swing.JRadioButton rb_serverOn;
    private javax.swing.JRadioButton rb_yellow;
    private javax.swing.JSlider slider_green;
    private javax.swing.JSlider slider_red;
    private javax.swing.JSlider slider_yellow;
    private javax.swing.JTextArea ta_output;
    private javax.swing.JTextField tf_green;
    private javax.swing.JTextField tf_red;
    private javax.swing.JTextField tf_yellow;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}

class ClientServer extends Thread{
    Socket connectSocket;
    InetAddress clientAddr;
    int clientNr;
    
    ScriptEngineManager mgr = new ScriptEngineManager();
    ScriptEngine engine = mgr.getEngineByName("JavaScript");
    
    public ClientServer(Socket connectSocket, int clientNr){
        this.connectSocket = connectSocket;
        clientAddr = connectSocket.getInetAddress();
        this.clientNr = clientNr;
    }
    
    @Override
    public void run(){
        try (
            // Stream writer to the connection socket
            PrintWriter out =
                    new PrintWriter(connectSocket.getOutputStream(), true);
            // Stream reader from the connection socket
            BufferedReader in = new BufferedReader(
                new InputStreamReader(connectSocket.getInputStream()));
        )
        {
            //Sending Clint number to client
            out.println("Green");
            
            // read from the connection socket
            while (connectSocket.isConnected()){
                //Changing light to red
                
                //changing to yellow
                
                //changing to green
            }
        } catch (IOException e){
            System.out.println("Exception occurred when trying to communicate with the client " + clientAddr.getHostAddress());
            System.out.println(e.getMessage());
        }
    }
}
